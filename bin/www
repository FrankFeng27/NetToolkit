#!/usr/bin/env node

/**
 * Module dependencies.
 */

var CoreEngine = require('../app');
var debug = require('debug')('nettoolkits:server');
var https = require('https');
var http = require('http');
var fs = require('fs');
const path = require('path');
var nw = require('niceware');

async function initiazlieServer() {
  
  let engine = new CoreEngine();  
  try {
    await engine.intialize();
  } catch (err) {
    console.log(err);
  }  
  // Get port from environment and store in Express.
  let arch = engine.arch;
  const config = arch.getService('config');
  let app = engine.expressApp;
  
  var port = normalizePort(process.env.PORT || config.get('server_port'));
  app.set('port', port);
  
  // Create HTTPS server.  
///  var server = https.createServer({
///    key: fs.readFileSync(path.join(__dirname, '../privateKey.key')),
///    cert: fs.readFileSync(path.join(__dirname, '../certificate.crt')),
///    passphrase: nw.generatePassphrase(16)[0]
///  }, app);

  // Create HTTP server
  var server = http.createServer(app);
  
  // Listen on provided port, on all network interfaces.  
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  
  // Normalize a port into a number, string, or false.  
  function normalizePort(val) {
    var port = parseInt(val, 10);
  
    if (isNaN(port)) {
      // named pipe
      return val;
    }
  
    if (port >= 0) {
      // port number
      return port;
    }
  
    return false;
  }
  
  // Event listener for HTTP server "error" event.  
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
  
    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;
  
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  
  // Event listener for HTTP server "listening" event.  
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind);
  }
}

initiazlieServer();
